{"ast":null,"code":"import { RESET_PC, SET_PC_SETTINGS, SET_PC_SHIP_MINUS_COUNT, SET_PC_SHOT, SET_PC_SHOT_DEAD, SET_PC_SHOT_MISS, SET_SHIP } from \"./actionPcTypes\";\nimport { isUsedId } from \"../../constants/constants\";\nimport { setBlock, setFollowing } from \"./actionCreators\";\nimport { findNeedShip, generateModifyShipArray } from \"../../utils/support\";\n\n// set initial settings for pc field\nexport const setPcSettings = pcOptions => {\n  return {\n    type: SET_PC_SETTINGS,\n    payload: pcOptions\n  };\n};\n\n//reset pc field\nexport const resetPc = () => {\n  return {\n    type: RESET_PC\n  };\n};\n\n//make shot\nexport const setPcShot = (ships, cell) => {\n  return {\n    type: SET_PC_SHOT,\n    payload: {\n      ships,\n      cell\n    }\n  };\n};\n\n//set pc ship dead status\nexport const setPcShipDead = (ships, cell) => {\n  return {\n    type: SET_PC_SHOT_DEAD,\n    payload: {\n      ships,\n      cell\n    }\n  };\n};\nexport const setPcShipMinusCount = () => {\n  return {\n    type: SET_PC_SHIP_MINUS_COUNT\n  };\n};\n\n// set pc cell miss status\nexport const setPcShipMiss = cell => {\n  return {\n    type: SET_PC_SHOT_MISS,\n    payload: cell\n  };\n};\n\n//set for cell from pc field ship svg\nexport const setShip = ships => {\n  return {\n    type: SET_SHIP,\n    payload: ships\n  };\n};\n\n//set ship status for field` cells\nexport const setShipOptions = (ships, shipsEx) => {\n  return dispatch => {\n    if (ships.length > 0) {\n      if (shipsEx.length === 0) {\n        let shipCells = [];\n        const newShips = [...ships];\n        newShips.forEach(ship => {\n          ship.location.forEach(coordinate => {\n            shipCells.push(coordinate);\n          });\n        });\n        dispatch(setShip(shipCells)); //set ship status through redux store\n      }\n    }\n  };\n};\n\n//set shot position for pc field\nexport const setComputerShot = ships => {\n  //gen unique id\n  const id = getRandomId();\n  if (isUsedId.includes(id) && isUsedId.length < 100) {\n    return setComputerShot(ships);\n  }\n  return dispatch => {\n    isUsedId.push(id);\n    // const ship = ships.find( ship => ship.location.includes(id)) // find need elem from array\n    // const shipIndex = ships.findIndex( ship => ship.location.includes(id)) // find need index for elem from array\n    const {\n      ship,\n      shipIndex\n    } = findNeedShip(ships, id);\n    // if ship is true, else state in isMiss\n    if (ship) {\n      const partOfShip = ship.location.indexOf(id);\n      if (partOfShip >= 0) {\n        // const hit = [...ship.hit]\n        // hit[partOfShip] = true\n        // const newShip = { ...ship, hit}\n        // const newShips = [...ships]\n        // newShips[shipIndex] = newShip\n        const {\n          newShips,\n          newShip,\n          hit\n        } = generateModifyShipArray(ship, shipIndex, partOfShip, ships); //create data for new ship\n        dispatch(setPcShot(newShips, {\n          [id]: true\n        })); // dispatch shot - modify state in store for needed cell\n        if (!hit.includes('')) {\n          newShip.dead = true; // set dead status to true\n          newShips[shipIndex] = newShip; //dispatch dead status for ship - modify state for cell\n          dispatch(setPcShipDead(newShips, {\n            [id]: true\n          })); // dispatch new status to modify status component`s state\n          dispatch(setPcShipMinusCount());\n        }\n        return {\n          res: true,\n          data: newShips\n        };\n      }\n    } else {\n      dispatch(setPcShipMiss({\n        [id]: true\n      })); // if pc is miss - change state on isMiss\n      dispatch(setFollowing('User')); // switch user\n      dispatch(setBlock()); // allow user click\n\n      return false;\n    }\n  };\n};\n\n//gen random id from pc field\nconst getRandomId = () => Math.floor(Math.random() * 10) + '' + Math.floor(Math.random() * 10);","map":{"version":3,"names":["RESET_PC","SET_PC_SETTINGS","SET_PC_SHIP_MINUS_COUNT","SET_PC_SHOT","SET_PC_SHOT_DEAD","SET_PC_SHOT_MISS","SET_SHIP","isUsedId","setBlock","setFollowing","findNeedShip","generateModifyShipArray","setPcSettings","pcOptions","type","payload","resetPc","setPcShot","ships","cell","setPcShipDead","setPcShipMinusCount","setPcShipMiss","setShip","setShipOptions","shipsEx","dispatch","length","shipCells","newShips","forEach","ship","location","coordinate","push","setComputerShot","id","getRandomId","includes","shipIndex","partOfShip","indexOf","newShip","hit","dead","res","data","Math","floor","random"],"sources":["I:/react_exam/src/redux/actions/actionCreatorsPC.js"],"sourcesContent":["import {\n  RESET_PC, SET_PC_SETTINGS, SET_PC_SHIP_MINUS_COUNT,\n  SET_PC_SHOT, SET_PC_SHOT_DEAD, SET_PC_SHOT_MISS, SET_SHIP\n} from \"./actionPcTypes\";\nimport { isUsedId } from \"../../constants/constants\";\nimport { setBlock, setFollowing } from \"./actionCreators\";\nimport {findNeedShip, generateModifyShipArray} from \"../../utils/support\";\n\n// set initial settings for pc field\nexport const setPcSettings = (pcOptions) => {\n  return {\n    type: SET_PC_SETTINGS,\n    payload: pcOptions\n  }\n}\n\n//reset pc field\nexport const resetPc = () => {\n  return {\n    type: RESET_PC\n  }\n}\n\n//make shot\nexport const setPcShot = (ships, cell) => {\n  return {\n    type: SET_PC_SHOT,\n    payload: {\n      ships,\n      cell\n    }\n  }\n}\n\n//set pc ship dead status\nexport const setPcShipDead = (ships, cell) => {\n  return {\n    type: SET_PC_SHOT_DEAD,\n    payload: {\n      ships,\n      cell\n    }\n  }\n}\n\nexport const setPcShipMinusCount = () => {\n  return {\n    type: SET_PC_SHIP_MINUS_COUNT,\n  }\n}\n\n// set pc cell miss status\nexport const setPcShipMiss = (cell) => {\n  return {\n    type: SET_PC_SHOT_MISS,\n    payload: cell\n  }\n}\n\n//set for cell from pc field ship svg\nexport const setShip = (ships) => {\n  return {\n    type: SET_SHIP,\n    payload: ships\n  }\n}\n\n//set ship status for field` cells\nexport const setShipOptions = (ships, shipsEx) => {\n\n  return (dispatch) => {\n    if(ships.length > 0) {\n      if(shipsEx.length === 0) {\n        let shipCells = []\n        const newShips = [...ships]\n        newShips.forEach( (ship) => {\n          ship.location.forEach( coordinate => {\n            shipCells.push(coordinate)\n          })\n        })\n        dispatch( setShip(shipCells) ) //set ship status through redux store\n      }\n    }\n  }\n}\n\n//set shot position for pc field\nexport const setComputerShot = (ships) => {\n\n  //gen unique id\n  const id = getRandomId()\n  if(isUsedId.includes(id) && isUsedId.length < 100 ) {\n    return setComputerShot(ships)\n  }\n\n  return (dispatch) => {\n    isUsedId.push(id)\n    // const ship = ships.find( ship => ship.location.includes(id)) // find need elem from array\n    // const shipIndex = ships.findIndex( ship => ship.location.includes(id)) // find need index for elem from array\n    const { ship, shipIndex } = findNeedShip(ships, id)\n    // if ship is true, else state in isMiss\n    if(ship) {\n      const partOfShip = ship.location.indexOf(id)\n      if(partOfShip >= 0) {\n        // const hit = [...ship.hit]\n        // hit[partOfShip] = true\n        // const newShip = { ...ship, hit}\n        // const newShips = [...ships]\n        // newShips[shipIndex] = newShip\n        const {newShips, newShip, hit} = generateModifyShipArray(ship, shipIndex, partOfShip, ships) //create data for new ship\n        dispatch( setPcShot(newShips, {[id]: true}) ) // dispatch shot - modify state in store for needed cell\n        if(!hit.includes('')) {\n          newShip.dead = true // set dead status to true\n          newShips[shipIndex] = newShip //dispatch dead status for ship - modify state for cell\n          dispatch( setPcShipDead(newShips, {[id]: true}) ) // dispatch new status to modify status component`s state\n          dispatch( setPcShipMinusCount() )\n        }\n\n        return {res: true, data: newShips}\n      }\n    } else {\n      dispatch( setPcShipMiss({[id]: true}) ) // if pc is miss - change state on isMiss\n      dispatch( setFollowing('User') ) // switch user\n      dispatch( setBlock() ) // allow user click\n\n      return false\n    }\n  }\n}\n\n\n//gen random id from pc field\nconst getRandomId = () => Math.floor(Math.random() * 10) + '' + Math.floor(Math.random() * 10)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}